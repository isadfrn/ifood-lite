generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  admin     Boolean  @default(false)
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  order     Order[]

  @@map("user")
}

model Ingredient {
  id               String             @id @default(uuid())
  name             String             @unique
  price            Decimal
  image            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  dishToIngredient DishToIngredient[]

  @@map("ingredient")
}

model DishToIngredient {
  id           String      @id @default(uuid())
  Ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?     @map("ingredient_id")
  Dish         Dish?       @relation(fields: [dishId], references: [id])
  dishId       String?     @map("dish_id")

  @@map("dish_to_ingredient")
}

model Dish {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String
  price            Decimal
  category         String
  image            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  dishToIngredient DishToIngredient[]
  dishToOrder      DishToOrder[]

  @@map("dish")
}

model DishToOrder {
  id      String  @id @default(uuid())
  Dish    Dish?   @relation(fields: [dishId], references: [id])
  dishId  String? @map("dish_id")
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  @@map("dish_to_order")
}

model Order {
  id          String        @id @default(uuid())
  status      String        @default("pending")
  total       Decimal
  paid        Boolean       @default(false)
  payMethod   String        @default("money")
  comment     String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  dishToOrder DishToOrder[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?       @map("user_id")

  @@map("order")
}
